Kubernetes is a container orchestration platform.
Containers are ephemeral in nature.

Single host
Auto Healing
Auto Scaling
Enterprise level support

Docker does not provide enterprise level support to your applications.
Kubernetes is installed on a Cluster. Cluster is a group of nodes.
Kubernetes can also be installed on 1 single node but it will only be used for development purposes and not enterprise level production state.

Kubernetes solves the problem of Single host by having clusters and multiple nodes where the container is moved to another node in the cluster
if there is a resource crunch on the first host.

Kubernetes solves the problem of Autoscaling by spinning up new containers via HPA(Horizontal Pod Autoscaling) where new containers are spun up on demand
when the threshold crosses a certain load. Also the YAML file in Kubernetes needs to be edited to increase the replicas from 0-> any number( which ever you wish).

The autohealing problem is solved by Kubernetes when it rolls out new containers when the previous ones are about to be shutdown.

Kubernetes has been mainly introduced to provide enterprise level support for applications. Docker has it's own limitations
and is not suitable for production at Enterprise level. So we use Kubernetes to fill in that gap. It is open source and new features keep getting added every now and then.


Day 31:- Kubernetes Architecture

Container runtime in Docker is called dockershim

You deploy a container in Docker. When it comes to Kubernetes it is called a POD.
Pods are are the smalest deployable units in Kubernetes. A pod contains one or more containers and they share the same storage, same network resources, and are present on the same host. They are also scheduled and run together.
1. Pod has a component called kubelet which makes sure that the Pod is always Up and running. It maintains the property of Autohealing by informing kubernetes that the Pod is/may go down.
2. You also have a container runtime like containerd, crio-d,.
3. Kube-proxy allows you networking, loadbalancing and Ip addressing.

The above components are part of the worker node or Dataplane.

API Server - The heart of your Kubernetes server which takes all the requests from the external world.
Scheduler - It schedules where the Pod has to be deployed on. The node where the pod needs to run is scheduled by the scheduler.
etcd - It is a key value store for the entire Kubernetes cluster. 
controller manager - It manages all the controllers like replicaset controller etc in the kubernetes infrastrucutre.
cloud controller manager(CCM) - It is a core optional control plane component designed to allow Kubernetes to interact with the APIs and resources of different underlying cloud providers.

Minikube & Kubectl installation

You need minicube and Kubectl installed on your client machine or server for managing/running your Kubernetes clusters. 
For minikube you already need a platform where docker or similar containerization tools have already been installed and you can isntall minikube ontop of it. 
Once you install minikube Kubectl will also be installed automatically.
kubectl is the official and essential command-line tool for running and managing Kubernetes clusters.
Kubectl lets you run commands to create, modify, and inspect Kubernetes resources, including pods, deployments, and services.

EKS, Openshift, Tanzu etc are different flavours of Kubernetes. 
